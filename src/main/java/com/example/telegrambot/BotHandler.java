package com.example.telegrambot;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.ArrayList;
import java.util.List;

@Component
public class BotHandler extends TelegramLongPollingBot {

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.token}")
    private String botToken;

    private final Long user1Id = 657629367L;
    private final Long user2Id = 916962390L;

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String userMessage = update.getMessage().getText();
            String userName = update.getMessage().getFrom().getFirstName(); // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

            if ("/start".equals(userMessage)) {
                sendWelcomeMessage(chatId);
            } else if (chatId.equals(user1Id)) {
                handleUser(chatId, userMessage, userName, user2Id);
            } else if (chatId.equals(user2Id)) {
                handleUser(chatId, userMessage, userName, user1Id);
            } else {
                sendResponse(chatId, "–í–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—å–æ–≥–æ –±–æ—Ç–∞.");
            }
        }
    }

    private void sendWelcomeMessage(Long chatId) {
        String welcomeText = "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:";
        sendResponseWithKeyboard(chatId, welcomeText, List.of("–°–Ω—ñ–¥–∞–Ω–æ–∫ üç≥", "–°—É–ø üç≤", "–í–µ—á–µ—Ä—è üçù"));
    }

    private void handleUser(Long chatId, String userMessage, String userName, Long targetUserId) {
        // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
        String message = userMessage.toLowerCase();

        switch (message) {
            case "—Å–Ω—ñ–¥–∞–Ω–æ–∫ üç≥":
                sendResponseWithKeyboard(chatId, "–î–ª—è —Å–Ω—ñ–¥–∞–Ω–∫—É –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç—Ä–∞–≤:", List.of("–û–º–ª–µ—Ç üç≥", "–ö–∞–Ω–∞–ø–æ—á–∫–∏ ü•™", "–ö–æ—Ñ—ñ ‚òï", "–ß–∞–π–æ—á–æ–∫ üçµ", "–ö–∞–∫–∞–æ –ø–∞–Ω–∫–µ–π–∫–∏ ü•û"));
                break;
            case "—Å—É–ø üç≤":
                sendResponseWithKeyboard(chatId, "–î–ª—è —Å—É–ø—É –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç—Ä–∞–≤:", List.of("–ì—Ä–µ—á–∞–Ω–∏–π üçú", "–ó –º–∞–∫–∞—Ä–æ–Ω–∞–º–∏ üçù", "–ë—É–ª—å–π–æ–Ω ü•£", "–†–∏—Å–æ–≤–∏–π üç≤", "–ó–µ–ª–µ–Ω–∏–π –ë–æ—Ä—â–∏–∫ ü•¨", "–ß–µ—Ä–≤–æ–Ω–∏–π –ë–æ—Ä—â–∏–∫ üçÖ"));
                break;
            case "–≤–µ—á–µ—Ä—è üçù":
                sendResponseWithKeyboard(chatId, "–î–ª—è –≤–µ—á–µ—Ä—ñ –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Å—Ç—Ä–∞–≤:", List.of("–†–∞–≥—É ü•ò", "–ü–µ—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ–ø–ª—è ü•î", "–ñ–∞—Ä–µ–Ω–∞ –∫–∞—Ä—Ç–æ–ø–ª—è üçü", "–ú–∞–∫–∞—Ä–æ–Ω–∏ –∑ —á–∏–º–æ—Å—å üçù", "–ü—ñ—Ü–∞ üçï", "–ì—Ä–µ—á–∫–∞ –∑ –º—è—Å–æ–º üçñ"));
                break;
            case "–æ–º–ª–µ—Ç üç≥":
            case "–∫–∞–Ω–∞–ø–æ—á–∫–∏ ü•™":
            case "–∫–æ—Ñ—ñ ‚òï":
            case "—á–∞–π–æ—á–æ–∫ üçµ":
            case "–∫–∞–∫–∞–æ –ø–∞–Ω–∫–µ–π–∫–∏ ü•û":
            case "–≥—Ä–µ—á–∞–Ω–∏–π üçú":
            case "–∑ –º–∞–∫–∞—Ä–æ–Ω–∞–º–∏ üçù":
            case "–±—É–ª—å–π–æ–Ω ü•£":
            case "—Ä–∏—Å–æ–≤–∏–π üç≤":
            case "–∑–µ–ª–µ–Ω–∏–π –±–æ—Ä—â–∏–∫ ü•¨":
            case "—á–µ—Ä–≤–æ–Ω–∏–π –±–æ—Ä—â–∏–∫ üçÖ":
            case "—Ä–∞–≥—É ü•ò":
            case "–ø–µ—á–µ–Ω–∞ –∫–∞—Ä—Ç–æ–ø–ª—è ü•î":
            case "–∂–∞—Ä–µ–Ω–∞ –∫–∞—Ä—Ç–æ–ø–ª—è üçü":
            case "–º–∞–∫–∞—Ä–æ–Ω–∏ –∑ —á–∏–º–æ—Å—å üçù":
            case "–ø—ñ—Ü–∞ üçï":
            case "–≥—Ä–µ—á–∫–∞ –∑ –º—è—Å–æ–º üçñ":
                sendResponse(targetUserId, "–ó–∞—Ö–æ—Ç—ñ–ª–æ—Å—è "+ userName + " –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ " + userMessage + ".");
                sendResponse(chatId, "–í–∞—à–∞ —Ö–æ—Ç—ñ–ª–∫–∞ –±—É–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤–∞—à–æ–º—É –∫–æ—Ö–∞–Ω–Ω—é.");
                sendWelcomeMessage(chatId); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –ø–æ—á–∞—Ç–∫—É
                break;
            default:
                sendResponse(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –û–±–µ—Ä—ñ—Ç—å: –°–Ω—ñ–¥–∞–Ω–æ–∫ üç≥, –°—É–ø üç≤, –í–µ—á–µ—Ä—è üçù.");
        }
    }

    private void sendResponseWithKeyboard(Long chatId, String text, List<String> options) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText(text);

            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
            keyboardMarkup.setResizeKeyboard(true); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–º—ñ–Ω—é—î —Ä–æ–∑–º—ñ—Ä –∫–Ω–æ–ø–æ–∫
            keyboardMarkup.setOneTimeKeyboard(false); // –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–∞–ª–∏—à–∞—Ç–∏–º–µ—Ç—å—Å—è –≤–∏–¥–∏–º–æ—é

            // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
            List<KeyboardRow> keyboardRows = new ArrayList<>();
            for (String option : options) {
                KeyboardRow row = new KeyboardRow();
                row.add(new KeyboardButton(option));
                keyboardRows.add(row);
            }
            keyboardMarkup.setKeyboard(keyboardRows);

            message.setReplyMarkup(keyboardMarkup);

            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendResponse(Long chatId, String text) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText(text);
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
